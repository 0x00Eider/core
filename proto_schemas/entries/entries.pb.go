// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: proto_schemas/entries.proto

package entries

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of this post entry. Used as the ID for the entry.
	PostHash string `protobuf:"bytes,1,opt,name=PostHash,proto3" json:"PostHash,omitempty"`
	// The public key of the user who made the post.
	PosterPublicKey string `protobuf:"bytes,2,opt,name=PosterPublicKey,proto3" json:"PosterPublicKey,omitempty"`
	// The parent post. This is used for comments.
	ParentStakeID string `protobuf:"bytes,3,opt,name=ParentStakeID,proto3" json:"ParentStakeID,omitempty"`
	// The body of this post.
	Body *DeSoBodySchema `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
	// The PostHash of the post this post reposts
	RepostedPostHash string `protobuf:"bytes,5,opt,name=RepostedPostHash,proto3" json:"RepostedPostHash,omitempty"`
	// Indicator if this PostEntry is a quoted repost or not
	IsQuotedRepost bool `protobuf:"varint,6,opt,name=IsQuotedRepost,proto3" json:"IsQuotedRepost,omitempty"`
	// The amount the creator of the post gets when someone stakes
	// to the post.
	CreatorBasisPoints uint64 `protobuf:"varint,7,opt,name=CreatorBasisPoints,proto3" json:"CreatorBasisPoints,omitempty"`
	// The multiple of the payout when a user stakes to a post.
	// 2x multiple = 200% = 20,000bps
	StakeMultipleBasisPoints uint64 `protobuf:"varint,8,opt,name=StakeMultipleBasisPoints,proto3" json:"StakeMultipleBasisPoints,omitempty"`
	// The block height when the post was confirmed.
	ConfirmationBlockHeight uint32 `protobuf:"varint,9,opt,name=ConfirmationBlockHeight,proto3" json:"ConfirmationBlockHeight,omitempty"`
	// A timestamp used for ordering messages when displaying them to
	// users. The timestamp must be unique. Note that we use a nanosecond
	// timestamp because it makes it easier to deal with the uniqueness
	// constraint technically (e.g. If one second spacing is required
	// as would be the case with a standard Unix timestamp then any code
	// that generates these transactions will need to potentially wait
	// or else risk a timestamp collision. This complexity is avoided
	// by just using a nanosecond timestamp). Note that the timestamp is
	// an unsigned int as opposed to a signed int, which means times
	// before the zero time are not represented which doesn't matter
	// for our purposes. Restricting the timestamp in this way makes
	// lexicographic sorting based on bytes easier in our database which
	// is one of the reasons we do it.
	TimestampNanos uint64 `protobuf:"varint,10,opt,name=TimestampNanos,proto3" json:"TimestampNanos,omitempty"`
	// Users can "delete" posts, but right now we just implement this as
	// setting a flag on the post to hide it rather than actually deleting
	// it. This simplifies the implementation and makes it easier to "undelete"
	// posts in certain situations.
	IsHidden bool `protobuf:"varint,11,opt,name=IsHidden,proto3" json:"IsHidden,omitempty"`
	// Counter of users that have liked this post.
	LikeCount uint64 `protobuf:"varint,12,opt,name=LikeCount,proto3" json:"LikeCount,omitempty"`
	// Counter of users that have reposted this post.
	RepostCount uint64 `protobuf:"varint,13,opt,name=RepostCount,proto3" json:"RepostCount,omitempty"`
	// Counter of quote reposts for this post.
	QuoteRepostCount uint64 `protobuf:"varint,14,opt,name=QuoteRepostCount,proto3" json:"QuoteRepostCount,omitempty"`
	// Counter of diamonds that the post has received.
	DiamondCount uint64 `protobuf:"varint,15,opt,name=DiamondCount,proto3" json:"DiamondCount,omitempty"`
	// Whether or not this entry is deleted in the view.
	IsDeleted bool `protobuf:"varint,16,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	// How many comments this post has
	CommentCount uint64 `protobuf:"varint,17,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	// Indicator if a post is pinned or not.
	IsPinned bool `protobuf:"varint,18,opt,name=IsPinned,proto3" json:"IsPinned,omitempty"`
	// NFT info.
	IsNFT                          bool   `protobuf:"varint,19,opt,name=IsNFT,proto3" json:"IsNFT,omitempty"`
	NumNFTCopies                   uint64 `protobuf:"varint,20,opt,name=NumNFTCopies,proto3" json:"NumNFTCopies,omitempty"`
	NumNFTCopiesForSale            uint64 `protobuf:"varint,21,opt,name=NumNFTCopiesForSale,proto3" json:"NumNFTCopiesForSale,omitempty"`
	NumNFTCopiesBurned             uint64 `protobuf:"varint,22,opt,name=NumNFTCopiesBurned,proto3" json:"NumNFTCopiesBurned,omitempty"`
	HasUnlockable                  bool   `protobuf:"varint,23,opt,name=HasUnlockable,proto3" json:"HasUnlockable,omitempty"`
	NFTRoyaltyToCreatorBasisPoints uint64 `protobuf:"varint,24,opt,name=NFTRoyaltyToCreatorBasisPoints,proto3" json:"NFTRoyaltyToCreatorBasisPoints,omitempty"`
	NFTRoyaltyToCoinBasisPoints    uint64 `protobuf:"varint,25,opt,name=NFTRoyaltyToCoinBasisPoints,proto3" json:"NFTRoyaltyToCoinBasisPoints,omitempty"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schemas_entries_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schemas_entries_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_proto_schemas_entries_proto_rawDescGZIP(), []int{0}
}

func (x *Post) GetPostHash() string {
	if x != nil {
		return x.PostHash
	}
	return ""
}

func (x *Post) GetPosterPublicKey() string {
	if x != nil {
		return x.PosterPublicKey
	}
	return ""
}

func (x *Post) GetParentStakeID() string {
	if x != nil {
		return x.ParentStakeID
	}
	return ""
}

func (x *Post) GetBody() *DeSoBodySchema {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Post) GetRepostedPostHash() string {
	if x != nil {
		return x.RepostedPostHash
	}
	return ""
}

func (x *Post) GetIsQuotedRepost() bool {
	if x != nil {
		return x.IsQuotedRepost
	}
	return false
}

func (x *Post) GetCreatorBasisPoints() uint64 {
	if x != nil {
		return x.CreatorBasisPoints
	}
	return 0
}

func (x *Post) GetStakeMultipleBasisPoints() uint64 {
	if x != nil {
		return x.StakeMultipleBasisPoints
	}
	return 0
}

func (x *Post) GetConfirmationBlockHeight() uint32 {
	if x != nil {
		return x.ConfirmationBlockHeight
	}
	return 0
}

func (x *Post) GetTimestampNanos() uint64 {
	if x != nil {
		return x.TimestampNanos
	}
	return 0
}

func (x *Post) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *Post) GetLikeCount() uint64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Post) GetRepostCount() uint64 {
	if x != nil {
		return x.RepostCount
	}
	return 0
}

func (x *Post) GetQuoteRepostCount() uint64 {
	if x != nil {
		return x.QuoteRepostCount
	}
	return 0
}

func (x *Post) GetDiamondCount() uint64 {
	if x != nil {
		return x.DiamondCount
	}
	return 0
}

func (x *Post) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Post) GetCommentCount() uint64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Post) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *Post) GetIsNFT() bool {
	if x != nil {
		return x.IsNFT
	}
	return false
}

func (x *Post) GetNumNFTCopies() uint64 {
	if x != nil {
		return x.NumNFTCopies
	}
	return 0
}

func (x *Post) GetNumNFTCopiesForSale() uint64 {
	if x != nil {
		return x.NumNFTCopiesForSale
	}
	return 0
}

func (x *Post) GetNumNFTCopiesBurned() uint64 {
	if x != nil {
		return x.NumNFTCopiesBurned
	}
	return 0
}

func (x *Post) GetHasUnlockable() bool {
	if x != nil {
		return x.HasUnlockable
	}
	return false
}

func (x *Post) GetNFTRoyaltyToCreatorBasisPoints() uint64 {
	if x != nil {
		return x.NFTRoyaltyToCreatorBasisPoints
	}
	return 0
}

func (x *Post) GetNFTRoyaltyToCoinBasisPoints() uint64 {
	if x != nil {
		return x.NFTRoyaltyToCoinBasisPoints
	}
	return 0
}

type DeSoBodySchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body      string   `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	ImageURLs []string `protobuf:"bytes,2,rep,name=ImageURLs,proto3" json:"ImageURLs,omitempty"`
	VideoURLs []string `protobuf:"bytes,3,rep,name=VideoURLs,proto3" json:"VideoURLs,omitempty"`
}

func (x *DeSoBodySchema) Reset() {
	*x = DeSoBodySchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schemas_entries_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeSoBodySchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeSoBodySchema) ProtoMessage() {}

func (x *DeSoBodySchema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schemas_entries_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeSoBodySchema.ProtoReflect.Descriptor instead.
func (*DeSoBodySchema) Descriptor() ([]byte, []int) {
	return file_proto_schemas_entries_proto_rawDescGZIP(), []int{1}
}

func (x *DeSoBodySchema) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *DeSoBodySchema) GetImageURLs() []string {
	if x != nil {
		return x.ImageURLs
	}
	return nil
}

func (x *DeSoBodySchema) GetVideoURLs() []string {
	if x != nil {
		return x.VideoURLs
	}
	return nil
}

type CoinEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorBasisPoints          uint64 `protobuf:"varint,1,opt,name=CreatorBasisPoints,proto3" json:"CreatorBasisPoints,omitempty"`
	DeSoLockedNanos             uint64 `protobuf:"varint,2,opt,name=DeSoLockedNanos,proto3" json:"DeSoLockedNanos,omitempty"`
	NumberOfHolders             uint64 `protobuf:"varint,3,opt,name=NumberOfHolders,proto3" json:"NumberOfHolders,omitempty"`
	CoinsInCirculationNanosHash string `protobuf:"bytes,4,opt,name=CoinsInCirculationNanosHash,proto3" json:"CoinsInCirculationNanosHash,omitempty"`
	CoinWatermarkNanos          uint64 `protobuf:"varint,5,opt,name=CoinWatermarkNanos,proto3" json:"CoinWatermarkNanos,omitempty"`
	MintingDisabled             bool   `protobuf:"varint,6,opt,name=MintingDisabled,proto3" json:"MintingDisabled,omitempty"`
	TransferRestrictionStatus   int32  `protobuf:"varint,7,opt,name=TransferRestrictionStatus,proto3" json:"TransferRestrictionStatus,omitempty"`
}

func (x *CoinEntry) Reset() {
	*x = CoinEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schemas_entries_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinEntry) ProtoMessage() {}

func (x *CoinEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schemas_entries_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinEntry.ProtoReflect.Descriptor instead.
func (*CoinEntry) Descriptor() ([]byte, []int) {
	return file_proto_schemas_entries_proto_rawDescGZIP(), []int{2}
}

func (x *CoinEntry) GetCreatorBasisPoints() uint64 {
	if x != nil {
		return x.CreatorBasisPoints
	}
	return 0
}

func (x *CoinEntry) GetDeSoLockedNanos() uint64 {
	if x != nil {
		return x.DeSoLockedNanos
	}
	return 0
}

func (x *CoinEntry) GetNumberOfHolders() uint64 {
	if x != nil {
		return x.NumberOfHolders
	}
	return 0
}

func (x *CoinEntry) GetCoinsInCirculationNanosHash() string {
	if x != nil {
		return x.CoinsInCirculationNanosHash
	}
	return ""
}

func (x *CoinEntry) GetCoinWatermarkNanos() uint64 {
	if x != nil {
		return x.CoinWatermarkNanos
	}
	return 0
}

func (x *CoinEntry) GetMintingDisabled() bool {
	if x != nil {
		return x.MintingDisabled
	}
	return false
}

func (x *CoinEntry) GetTransferRestrictionStatus() int32 {
	if x != nil {
		return x.TransferRestrictionStatus
	}
	return 0
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey        string            `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Username         string            `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Description      string            `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	ProfilePic       string            `protobuf:"bytes,4,opt,name=ProfilePic,proto3" json:"ProfilePic,omitempty"`
	CreatorCoinEntry *CoinEntry        `protobuf:"bytes,5,opt,name=CreatorCoinEntry,proto3" json:"CreatorCoinEntry,omitempty"`
	DAOCoinEntry     *CoinEntry        `protobuf:"bytes,6,opt,name=DAOCoinEntry,proto3" json:"DAOCoinEntry,omitempty"`
	ExtraData        map[string][]byte `protobuf:"bytes,7,rep,name=ExtraData,proto3" json:"ExtraData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDeleted        bool              `protobuf:"varint,8,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	IsHidden         bool              `protobuf:"varint,9,opt,name=isHidden,proto3" json:"isHidden,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schemas_entries_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schemas_entries_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_proto_schemas_entries_proto_rawDescGZIP(), []int{3}
}

func (x *Profile) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Profile) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Profile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Profile) GetProfilePic() string {
	if x != nil {
		return x.ProfilePic
	}
	return ""
}

func (x *Profile) GetCreatorCoinEntry() *CoinEntry {
	if x != nil {
		return x.CreatorCoinEntry
	}
	return nil
}

func (x *Profile) GetDAOCoinEntry() *CoinEntry {
	if x != nil {
		return x.DAOCoinEntry
	}
	return nil
}

func (x *Profile) GetExtraData() map[string][]byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *Profile) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Profile) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

var File_proto_schemas_entries_proto protoreflect.FileDescriptor

var file_proto_schemas_entries_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x08,
	0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x44, 0x65, 0x53, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x46, 0x54, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x46, 0x54, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x75, 0x6d,
	0x4e, 0x46, 0x54, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x4e, 0x75, 0x6d, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x4e, 0x75, 0x6d, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x4e, 0x75, 0x6d, 0x4e,
	0x46, 0x54, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x42,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x4e, 0x75, 0x6d,
	0x4e, 0x46, 0x54, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x48, 0x61, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x4e, 0x46, 0x54, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x4e,
	0x46, 0x54, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x1b, 0x4e, 0x46, 0x54, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x6f, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x4e, 0x46, 0x54, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x6f,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x60, 0x0a, 0x0e, 0x44, 0x65, 0x53, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52,
	0x4c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x52, 0x4c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c,
	0x73, 0x22, 0xe9, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x44, 0x65, 0x53, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x61, 0x6e,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x44, 0x65, 0x53, 0x6f, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x49,
	0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9c, 0x03,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a,
	0x0c, 0x44, 0x41, 0x4f, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x44, 0x41, 0x4f, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x35, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a, 0x3c,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x17, 0x5a, 0x15,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_schemas_entries_proto_rawDescOnce sync.Once
	file_proto_schemas_entries_proto_rawDescData = file_proto_schemas_entries_proto_rawDesc
)

func file_proto_schemas_entries_proto_rawDescGZIP() []byte {
	file_proto_schemas_entries_proto_rawDescOnce.Do(func() {
		file_proto_schemas_entries_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_schemas_entries_proto_rawDescData)
	})
	return file_proto_schemas_entries_proto_rawDescData
}

var file_proto_schemas_entries_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_schemas_entries_proto_goTypes = []interface{}{
	(*Post)(nil),           // 0: Post
	(*DeSoBodySchema)(nil), // 1: DeSoBodySchema
	(*CoinEntry)(nil),      // 2: CoinEntry
	(*Profile)(nil),        // 3: Profile
	nil,                    // 4: Profile.ExtraDataEntry
}
var file_proto_schemas_entries_proto_depIdxs = []int32{
	1, // 0: Post.Body:type_name -> DeSoBodySchema
	2, // 1: Profile.CreatorCoinEntry:type_name -> CoinEntry
	2, // 2: Profile.DAOCoinEntry:type_name -> CoinEntry
	4, // 3: Profile.ExtraData:type_name -> Profile.ExtraDataEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_schemas_entries_proto_init() }
func file_proto_schemas_entries_proto_init() {
	if File_proto_schemas_entries_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_schemas_entries_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schemas_entries_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeSoBodySchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schemas_entries_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schemas_entries_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_schemas_entries_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_schemas_entries_proto_goTypes,
		DependencyIndexes: file_proto_schemas_entries_proto_depIdxs,
		MessageInfos:      file_proto_schemas_entries_proto_msgTypes,
	}.Build()
	File_proto_schemas_entries_proto = out.File
	file_proto_schemas_entries_proto_rawDesc = nil
	file_proto_schemas_entries_proto_goTypes = nil
	file_proto_schemas_entries_proto_depIdxs = nil
}
