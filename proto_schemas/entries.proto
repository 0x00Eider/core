syntax = "proto3";
option go_package = "proto_schemas/entries";

message Post {
  // The hash of this post entry. Used as the ID for the entry.
  string PostHash = 1;

  // The public key of the user who made the post.
  string PosterPublicKey = 2;

  // The parent post. This is used for comments.
  string ParentStakeID = 3;

  // The body of this post.
  DeSoBodySchema Body = 4;

  // The PostHash of the post this post reposts
  string RepostedPostHash = 5;

  // Indicator if this PostEntry is a quoted repost or not
  bool IsQuotedRepost = 6;

  // The amount the creator of the post gets when someone stakes
  // to the post.
  uint64 CreatorBasisPoints = 7;

  // The multiple of the payout when a user stakes to a post.
  // 2x multiple = 200% = 20,000bps
  uint64 StakeMultipleBasisPoints = 8;

  // The block height when the post was confirmed.
  uint32 ConfirmationBlockHeight = 9;

  // A timestamp used for ordering messages when displaying them to
  // users. The timestamp must be unique. Note that we use a nanosecond
  // timestamp because it makes it easier to deal with the uniqueness
  // constraint technically (e.g. If one second spacing is required
  // as would be the case with a standard Unix timestamp then any code
  // that generates these transactions will need to potentially wait
  // or else risk a timestamp collision. This complexity is avoided
  // by just using a nanosecond timestamp). Note that the timestamp is
  // an unsigned int as opposed to a signed int, which means times
  // before the zero time are not represented which doesn't matter
  // for our purposes. Restricting the timestamp in this way makes
  // lexicographic sorting based on bytes easier in our database which
  // is one of the reasons we do it.
  uint64 TimestampNanos = 10;

  // Users can "delete" posts, but right now we just implement this as
  // setting a flag on the post to hide it rather than actually deleting
  // it. This simplifies the implementation and makes it easier to "undelete"
  // posts in certain situations.
  bool IsHidden = 11;

  // Counter of users that have liked this post.
  uint64 LikeCount = 12;

  // Counter of users that have reposted this post.
  uint64 RepostCount = 13;

  // Counter of quote reposts for this post.
  uint64 QuoteRepostCount = 14;

  // Counter of diamonds that the post has received.
  uint64 DiamondCount = 15;

  // Whether or not this entry is deleted in the view.
  bool isDeleted = 16;

  // How many comments this post has
  uint64 CommentCount = 17;

  // Indicator if a post is pinned or not.
  bool IsPinned = 18;

  // NFT info.
  bool IsNFT = 19;
  uint64 NumNFTCopies = 20;
  uint64 NumNFTCopiesForSale = 21;
  uint64 NumNFTCopiesBurned = 22;
  bool HasUnlockable = 23;
  uint64 NFTRoyaltyToCreatorBasisPoints = 24;
  uint64 NFTRoyaltyToCoinBasisPoints = 25;
}

message DeSoBodySchema {
    string Body = 1;
    repeated string ImageURLs = 2;
    repeated string VideoURLs = 3;
}


message CoinEntry {
  uint64 CreatorBasisPoints = 1;

  uint64 DeSoLockedNanos = 2;

  uint64 NumberOfHolders = 3;

  string CoinsInCirculationNanosHash = 4;

  uint64 CoinWatermarkNanos = 5;

  bool MintingDisabled = 6;

  int32 TransferRestrictionStatus =  7;
}

message Profile {
  string PublicKey = 1;

  string Username = 2;

  string Description = 3;

  string ProfilePic = 4;

  CoinEntry CreatorCoinEntry = 5;

  CoinEntry DAOCoinEntry = 6;

  map<string, bytes> ExtraData = 7;

  bool isDeleted = 8;

  bool isHidden = 9;
}